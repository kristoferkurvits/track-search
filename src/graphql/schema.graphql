scalar Date

type BaseEntity {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
}

type Track implements BaseEntity {
  name: String!
  artistName: String!
  duration: Int!
  ISRC: String!
  releaseDate: String!
}

type Query {
  getTrackById(id: ID!): Track
  getAllTracks: [Track]
}

type Mutation {
  createTrack(input: TrackInput): Track
  updateTrack(id: ID!, input: TrackInput): Track
  deleteTrack(id: ID!): ID
}

input TrackInput {
  name: String!
  artistName: String!
  duration: Int!
  ISRC: String!
  releaseDate: Date!
}
